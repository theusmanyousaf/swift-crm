// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Document {
  DocumentID      String    @id @default(auto()) @map("_id") @db.ObjectId
  documentName    String
  type            String
  version         Int
  status          String
  documentUrl     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  CustomerID      String    @db.ObjectId
  customer        Customer  @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade, name: "CustomerDocuments")
}

model Customer {
  CustomerID        String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  imageUrl          String
  email             String
  phone             String
  address           String
  status            String
  country           String
  createdAt         DateTime      @default(now())
  documents         Document[]    @relation("CustomerDocuments")
  transactions      Transaction[] @relation("CustomerTransactions")
}

model Transaction {
  TransactionID       String               @id @default(auto()) @map("_id") @db.ObjectId
  paymentStatus       String
  quantity            Int
  amount              Int
  createdAt           DateTime             @default(now()) 
  customer            Customer             @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade, name: "CustomerTransactions")
  CustomerID          String               @db.ObjectId
  transactionProducts TransactionProduct[] @relation("TransactionProducts")
}

model Product {
  productId         String               @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  imageUrl          String
  category          String
  cost              Int
  price             Int
  quantity          Int 
  createdAt         DateTime             @default(now()) 
  updatedAt         DateTime             @updatedAt
  transactionProducts TransactionProduct[] @relation("TransactionProducts")
}

model TransactionProduct {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  transactionId     String      @db.ObjectId
  productId         String      @db.ObjectId
  
  transaction       Transaction @relation(fields: [transactionId], references: [TransactionID], onDelete: Cascade, name: "TransactionProducts")
  product           Product     @relation(fields: [productId], references: [productId], onDelete: Cascade, name: "TransactionProducts")

  @@unique([transactionId, productId])
}